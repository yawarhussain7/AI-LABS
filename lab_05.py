# -*- coding: utf-8 -*-
"""Lab_05.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1du282AAOc7ZvCGgujyMg5fAPVWu5n2ed
"""

import heapq

graph = {
    "Skardu": {"Khaplu": 270, "Gilgit": 180},
    "Gilgit": {"Roundu": 270, "Kachura": 190, "Skardu": 180},
    "Khaplu": {"Skardu": 270, "Kharmang": 220},
    "Roundu": {"Skardu": 220, "Gilgit": 880},
    "Nagar": {"Hunza": 170},
    "Hunza": {"Ghizar": 880},
    "Kharmang": {"Hunza":390, "Skardu":90},
    "Kachura": {"Gilgit":130,"Skardu":60},
    "Ghizar": {"Hunza":120,"Khaplu":990}
}

heuristic = {
    "Gilgit": 1210,
    "Skardu": 1100,
    "Khaplu": 1050,
    "Kharmang": 880,
    "Hunza": 1250,
    "Nagar": 0,
    "Roundu": 1300,
    "Kachura": 1000,
    "Ghizar": 1400
}

def A_Star(graph, start, goal, heuristic):
    open_list = []
    heapq.heappush(open_list, (heuristic[start], [start]))
    g_costs = {start: 0}
    closed_set = set()

    while open_list:
        f, path = heapq.heappop(open_list)
        node = path[-1]

        if node == goal:
            return path, g_costs[node]

        if node in closed_set:
            continue

        closed_set.add(node)

        for neighbor, cost in graph[node].items():
            tentative_g = g_costs[node] + cost

            if neighbor not in g_costs or tentative_g < g_costs[neighbor]:
                g_costs[neighbor] = tentative_g
                f_cost = tentative_g + heuristic.get(neighbor, float('inf'))
                new_path = path + [neighbor]
                heapq.heappush(open_list, (f_cost, new_path))

    return None, float('inf')


if __name__ == "__main__":
    start_city = "Skardu"
    goal_city = "Khaplu"
    path, cost = A_Star(graph, start_city, goal_city, heuristic)
    print(f"A* Path: {path}")
    print(f"Total Cost: {cost}")